# Spring Boot application properties
# You can configure server port, logging, etc. here.

# Server port for the application
server.port=8080

# Logging level (optional)
logging.level.com.example.cbcf=INFO
```

**To run this application:**

1.  **Save the files:** Create a Spring Boot project (e.g., using Spring Initializr with `Spring Web` dependency) and place these Java files in their respective `src/main/java/com/example/cbcf/` subdirectories (`controller`, `model`, `service`). Place `application.properties` in `src/main/resources/`.
2.  **Build:** Open a terminal in the project root and run `./mvnw clean install` (Maven) or `./gradlew clean build` (Gradle).
3.  **Run:** Execute the application using `java -jar target/cbcf-0.0.1-SNAPSHOT.jar` (replace `0.0.1-SNAPSHOT` with your actual version) or run the `CbcfApplication.java` directly from your IDE.

The application will start on `http://localhost:8080`.

**How to test the endpoints (using `curl` or Postman/Insomnia):**

1.  **NonUeMessageTransfer (POST):**
    ```bash
    curl -X POST http://localhost:8080/namf-comm/v1/non-ue-messages \
    -H "Content-Type: application/json" \
    -d '{
        "messageContent": "Emergency Broadcast: Severe weather warning!",
        "targetUeId": "imsi-123456789012345"
    }'
    ```
    You should get a `200 OK` response and see console output from the service and mock AMF client.

2.  **NonUeN2InfoSubscribe (POST):**
    ```bash
    curl -X POST http://localhost:8080/namf-comm/v1/subscriptions \
    -H "Content-Type: application/json" \
    -d '{
        "callbackUrl": "http://cbcf-consumer.example.com/n2-notifications",
        "n2InfoType": "CELL_BROADCAST_INFO"
    }'
    ```
    You should get a `201 Created` response with a `subscriptionId` and `resourceLocation` in the body, and console output.

    Example Response:
    ```json
    {
        "subscriptionId": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
        "resourceLocation": "/namf-comm/v1/subscriptions/a1b2c3d4-e5f6-7890-1234-567890abcdef"
    }
    ```
    *Note down the `subscriptionId` from the response for the unsubscribe operation.*

3.  **NonUeN2InfoUnsubscribe (DELETE):**
    Replace `{your_subscription_id}` with the ID obtained from the subscribe operation.
    ```bash
    curl -X DELETE http://localhost:8080/namf-comm/v1/subscriptions/{your_subscription_id}
    ```
    You should get a `204 No Content` response and console output indicating the subscription was removed. If you try to unsubscribe the same ID again, it will print "Subscription with ID ... not foun